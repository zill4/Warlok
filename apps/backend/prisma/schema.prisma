generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your preferred DB
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  wallet      String   @unique // Public key of custodial wallet
  profile     Profile?
  createdCards Card[]
  games       Game[]   @relation("GamePlayers")
  createdAt   DateTime @default(now())
  modelJobs   ModelJob[]
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  username  String
  bio       String?
}

model Card {
  id            String   @id @default(uuid())
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id])
  name          String
  chessPieceType String
  pokerCardSymbol String
  pokerCardType  String
  cardType      String
  description   String
  effect        String
  image         String?  // URL or file path
  edition       String   @default(uuid()) // Random hex string for edition
  ownerWallet   String   // Current owner's wallet address
  createdAt     DateTime @default(now())

  @@index([creatorId])
}

model Game {
  id          String         @id @default(uuid())
  winnerId    String?
  players     User[]         @relation("GamePlayers")
  turns       HistoryEntry[]
  decks       Json[]         // Array of card IDs or CardData
  createdAt   DateTime       @default(now())
}

model HistoryEntry {
  id        String   @id @default(uuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])
  type      String
  from      String
  to        String
  pieceType String?
  color     String
  captured  String?
  timestamp DateTime
}

model ModelJob {
  id          String    @id
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  status      String    // queued, processing, completed, failed
  progress    Float     @default(0)
  imageUrl    String
  modelUrl    String?
  statusUrl   String
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@index([userId])
}